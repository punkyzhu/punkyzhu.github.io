<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>老朱的摩崖石刻</title>
	<link href="http://0.0.0.0/atom.xml" rel="self" />
	<link href="http://0.0.0.0/" />
	<updated>2014-09-08T13:15:56+08:00</updated>
	<id>http://0.0.0.0/</id>
	<author>
		<name>老朱</name>
		<email>gbzhu4mse@gmail.com</email>
	</author>
	
	<entry>
		<title>Mac机器安装Jekyll</title>
		<link href="http://0.0.0.0/posts/mac%E6%9C%BA%E5%99%A8%E5%AE%89%E8%A3%85jekyll.html" />
		<updated>2014-09-03T00:00:00+08:00</updated>
		<id>http://0.0.0.0/posts/mac%E6%9C%BA%E5%99%A8%E5%AE%89%E8%A3%85jekyll.html</id>
		<content type="html"><![CDATA[<p>首先保证机器已经安装了gem。通常，Mac OSX自己有自带的rubygem。但是，如果版本比较老的话，更新到最新的版本。</p>

<pre><code>sudo gem update --system
</code></pre>

<h4>第一步：安装liquid</h4>

<pre><code>sudo gem install liquid
</code></pre>

<h4>第二步：安装jekyll</h4>

<p>执行以下命令：</p>

<pre><code>sudo gem install jekyll
</code></pre>

<p>All of Jekyll’s gem dependencies are automatically installed by the above command, so you won’t have to worry about them at all.</p>

<h4>第三步：生成一个结构</h4>

<p>要生成一个目录结构，有3种方法：</p>

<ul>
<li>采用自定义的方法</li>
<li>采用预生成的结构</li>
<li>采用第三方定制的主题</li>
</ul>


<p>第一种方法请参考官方的网站。</p>

<p>第二种方法很简单，执行以下命令：</p>

<pre><code>jekyll new XXXXXX (代表你的目录根名称)
</code></pre>

<p>通过该方法，可以得到一个标准的目录结构。包括：<em>config.xml、index.html、</em>post、_layout等必要的目录。</p>

<p>第三种方法，可以下载他人做好的目录结构，以及相应的主题。我采用的是“掌心”定制的主题：<a href="https://github.com/pizn/pizn.github.com">Violet 2</a></p>

<pre><code class="lua">function(){
console.log("This is a test\n");
}
</code></pre>
]]></content>
	</entry>
	
	<entry>
		<title>数字媒体实验室暑期项目安排</title>
		<link href="http://0.0.0.0/posts/%E6%95%B0%E5%AD%97%E5%AA%92%E4%BD%93%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE%E5%AE%89%E6%8E%92.html" />
		<updated>2014-07-18T00:00:00+08:00</updated>
		<id>http://0.0.0.0/posts/%E6%95%B0%E5%AD%97%E5%AA%92%E4%BD%93%E5%AE%9E%E9%AA%8C%E5%AE%A4%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE%E5%AE%89%E6%8E%92.html</id>
		<content type="html"><![CDATA[<h3>基本情况</h3>

<p>数字媒体实验室（苹果工作室）结合自身项目提供学生暑期实训。为顺利完成该项工作，特制定本方法，请全体带队教师和参与学生共同遵守。</p>

<p>本次暑期项目包括以下内容：</p>

<ol>
<li>常州高新区项目</li>
<li>科技部科技支撑计划项目</li>
<li>新媒体预研项目</li>
</ol>


<h4>对学生的基本要求：</h4>

<blockquote><ol>
<li>参加项目学生与带队老师相互协商，组成项目团队。为达到项目锻炼的目的，所有学生每人只能（也必须）参与以上1个项目。</li>
<li>除个别小组自行规定外，其余所有同学必须在7月26日到校，7月28日正式开始工作。</li>
<li>除个别小组自行规定外，一般实训共5周时间。</li>
<li>遵守实验室规定和考勤制度。</li>
</ol>
</blockquote>

<h4>对带队教师的要求</h4>

<blockquote><ol>
<li>带队教师必须每日到场，做到日检查，周汇报</li>
<li>做好考勤工作</li>
<li>重视安全问题，特别是人员安全，注意实验室安全。</li>
</ol>
</blockquote>

<h3>项目概况</h3>

<h4>常州高新区项目</h4>

<p>该项目是目前在研项目的延续，项目目标是基于web services框架开发地理信息共享服务平台，并开发示范应用。</p>

<h5><code>带队老师：</code> 关培超 博士</h5>

<h5><code>对学生要求：</code></h5>

<ol>
<li>了解web service基本原理</li>
<li>具有较好的java（后端）或javascript+HTML（前端）基础，具有项目实践经验者优先</li>
<li>考虑到项目的延续性，参加该项目的同学需保证能工作到下学期期末</li>
</ol>


<h4>科技部科技支撑计划项目</h4>

<p>该项目目前的技术开发已经接近尾声，暑期工作主要围绕项目的稳定性和可靠性展开，同时需要进行必要的文档整理工作。</p>

<h5><code>带队老师：</code>陈晓峰 老师、朱鑫伟 博士</h5>

<h5><code>对学生的要求：</code></h5>

<ol>
<li>尽量采用原有的技术队伍，保证技术工作的顺利展开</li>
<li>增加1名学生，负责项目的测试和文档整理工作</li>
</ol>


<h4>新媒体预研项目</h4>

<p>该项目是实验室拟开始的新项目的预研，目的是为新项目的顺利开始进行必要的前期准备工作。该项目拟通过对新媒体内容格式的研究，以新技术手段实现从新媒体碎片内容到跨平台、跨终端的精美呈现。预研阶段主要集中于：</p>

<ol>
<li>新媒体内容格式的研究。研究现有新媒体内容组织的标准、规范，以及呈现方式的有点和缺陷</li>
<li>研究新媒体内容布局的规律。在研究一般规律（如：内容与空白的关系、文字的排版模式、图片的呈现方式、文字与图片的布版关系等）的基础上，进一步研究针对不同主题的布局参数</li>
<li>研究方法。采用定量研究的方法，在页面或纸面样本基础上，通过度量和统计，分析页面布局的规律，形成分析报告</li>
</ol>


<h5><code>带队老师：</code>邰媛媛 博士、郑思 博士</h5>

<h5><code>对学生的要求：</code></h5>

<ol>
<li>了解新媒体内容格式规范和标准</li>
<li>具有数理统计的基础，至少熟悉1个该方面的软件工具（需要2名学生）</li>
<li>具有HTML5+Javascript+CSS的基础，具有项目经验者优先（需要1名同学）</li>
<li>具有Java编程基础，熟悉后台编程（需要2名同学）</li>
</ol>


<h3>文档</h3>

<p>项目开始前，带队老师需准备以下文档：</p>

<blockquote><ol>
<li>指导学生参与项目的详细计划安排（7月1日前提交）。2. 评分标准。4. 暑期实训地点和机位安排。实训结束后，带队老师需提交以下文档：</li>
<li>工作周志</li>
<li>实训成绩表</li>
<li>对学生的实训报告评语</li>
</ol>
</blockquote>

<p>实训结束后，学生需提交以下材料：（9月10日前提交）</p>

<blockquote><ol>
<li>实习鉴定表，由指导老师签字评分。2. 项目计划表（选题研究、项目启动、需求分析、架构设计、代码实现、测试、验收交付等节点的时间安排）。3. 每周工作日志。4. 中期评估报告（包括源代码），指导教师需在实训报告上给予切合实际的详细的评语。5. 测试报告（buglist 表）。6. 实训总结（文字部分不少于3000字，不包括源代码）。</li>
</ol>
</blockquote>

<h3>成绩</h3>

<blockquote><ol>
<li>软件工程实训的成绩，指导老师评分占50%，教学指导委员会评分占50%。</li>
<li>对严重违反实验室规定和纪律，并造成影响的，可以取消成绩，并报学院处理。</li>
</ol>
</blockquote>
]]></content>
	</entry>
	
	<entry>
		<title>学习 Lua 笔记</title>
		<link href="http://0.0.0.0/posts/learn-lua.html" />
		<updated>2013-03-28T00:00:00+08:00</updated>
		<id>http://0.0.0.0/posts/learn-lua.html</id>
		<content type="html"><![CDATA[<h3>1. 是什么</h3>

<p>今天 Lua 发布了 <a href="http://www.lua.org/ftp/lua-5.2.2.tar.gz">5.2.2</a>，这是一个 bug 修复版本，一门令人神往的语言。</p>

<p>Lua 是一个小巧的脚本语言。作者是巴西人。该语言的设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</p>

<p>Lua 脚本可以很容易的被 C/C++ 代码调用，也可以反过来调用 C/C++ 的函数，这使得 Lua 在应用程序中可以被广泛应用。不仅仅作为扩展脚本，也可以作为普通的配置文件，代替 xml，ini 等文件格式，并且更容易理解和维护。</p>

<p>Lua由标准 C 编写而成，代码简洁优美，几乎在所有操作系统和平台上都可以编译，运行。</p>

<p>一个完整的 Lua 解释器不过200k，在目前所有脚本引擎中，Lua 的速度是最快的。这一切都决定了 Lua 是作为嵌入式脚本的最佳选择。</p>

<h3>2. 哪里学</h3>

<p>官方网站：<a href="http://www.lua.org/home.html">http://www.lua.org/home.html</a></p>

<p>注意它的名字：<strong>Lua</strong></p>

<p>已经发布的书：</p>

<ul>
<li>Wrox.Beginning.Lua.Programming.Feb.2007.pdf</li>
<li>Programming in Lua 2nd Edition.pdf</li>
<li>Programming In Lua CHS.pdf</li>
</ul>


<p>其中中文版由曾经的 luachina.net 翻译，今天发现网站已经打不开了。</p>

<p>官方手册：<a href="http://www.lua.org/manual/5.1/">http://www.lua.org/manual/5.1/</a></p>

<p>用 wget 可将手机抓取到本地：</p>

<pre><code>wget -r -p -k -np http://www.lua.org/manual/5.1/
</code></pre>

<p>为了访问方便，可以加一个 meta refresh：</p>

<pre><code class="html">&lt;meta http-equiv="refresh" content="0;URL='http://example.com/'"&gt;
</code></pre>

<h3>3. 安装</h3>

<p>Mac OS X 上我通过 brew 安装</p>

<pre><code>$ brew install lua
</code></pre>

<p>安装日志：</p>

<pre><code>ChentekiMacBook-Pro:jsoops Christen$ brew install lua
==&gt; Downloading http://www.lua.org/ftp/lua-5.1.4.tar.gz
######################################################################## 100.0%
==&gt; Patching
patching file Makefile
patching file src/Makefile
######################################################################## 100.0%
patching file lcode.c
patching file ldblib.c
patching file liolib.c
patching file llex.c
patching file loadlib.c
patching file lstrlib.c
patching file lvm.c
==&gt; make macosx INSTALL_TOP=/usr/local/Cellar/lua/5.1.4 INSTALL_MAN=/usr/local/C
==&gt; make install INSTALL_TOP=/usr/local/Cellar/lua/5.1.4 INSTALL_MAN=/usr/local/
/usr/local/Cellar/lua/5.1.4: 15 files, 288K, built in 20 seconds

ChentekiMacBook-Pro:jsoops Christen$ lua
Lua 5.1.4  Copyright (C) 1994-2008 Lua.org, PUC-Rio
&gt; print (12)
12
</code></pre>

<h3>4. 第一个脚本</h3>

<pre><code class="lua">function fact (n)
  if n == 0 then
    return 1
  else
    return n * fact(n-1)
end end

print("enter a number:")
a = io.read("*number")

print(fact(a))
</code></pre>

<p>很干净的代码！</p>

<h3>5. VS Python</h3>

<p>网上太多关于 Python 和 Lua 选型的争论。其实两种语言我都不太熟悉，OSchina 上的一个网友说得好：</p>

<p><em>fosky 回答于 2011-05-18 08:15：</em></p>

<blockquote><p>当大家都在争论用 Python 还是 Lua 做脚本的时候，WOW 已经发布了 WOW世界 LUA 编程指南。用什么没关系，真正去用就好。</p></blockquote>

<p><em>outrace 回答于 2011-05-18 09:02：</em></p>

<blockquote><p>你什么类型的项目啊？</p>

<p>本人 Python 和 Lua 都有一定经验，提一些自己的看法：</p>

<p>1、脚本担负的任务重，则用 Python，任务轻，则用 Lua。因为 Lua 内置的东西太少。</p>

<p>2、性能要求高，用 Lua。要求不太高，用python。因为 <a href="http://luajit.org/">LuaJIT</a> 性能很强大。性能不行要用 C 写的时候，Lua 跟 C 结合互调要比 Python 跟 C 好一些。</p>

<p>3、希望招人或者培训人快一些。可能 Lua 好一些。因为需要学很少的东西就可以干一定的工作。</p></blockquote>

<p>CSDN 网友 <a href="http://blog.csdn.net/shgaol/article/details/3746477">shgaol</a> 的见解亦是如此：</p>

<p>1、两者的定位不同。 Python 的定位在于自身的独立开发，即是说 Python 定位于自己能解决所有的问题。 Lua 定位在与其它的代码，尤其是 C++ 代码进行相互配合的编译，单独的 Lua 本身没有任何的意义。</p>

<p>2、站在解决问题的角度上看。 Python 依靠自身越来越强大的库，让编程者能实现越来越多，越来越复杂的问题。 Lua 本身则必须与其它的编译语言结合，才能解决问题。以 C++ + Lua 来举例。单独的 C++ ，因为 C++ 的复杂性，在其解决问题提供方便的同时，也给程序员带来了很大的麻烦，这些麻烦主要有两个方面：</p>

<p>1）C++ 本身，特别是能用好 C++ ，对程序员就来说就是一个很高的要求。</p>

<p>2）在解决复杂问题时， C++ 程序结构的复杂性和逻辑实现的复杂性，给程序员对程序的改进和维护带来了很大的麻烦。而 C++ 与Lua的结合，让 C++ 可以只负责为 Lua 提供各种基本的功能函数库，而Lua调用这些库来实现各种逻辑功能。这种分工可以让程序员将程序中的基本代码库和逻辑实现代码进行分离，使程序的效率和可维护有了很大的提高。</p>

<p>所以，如果真的要站在解决问题的角度来对 Python 和 Lua 进行对比的话。实际上，是 C++ 与 Python 进行对比，而与 Lua 无关。</p>

<p>3、 Python 与 C++ 对比，我觉得 Python 与 C++ 对比的优势就在于其所提供的基本库，大大的降低了程序复杂度与可维护性对程序员本身的要求。比如，同样的功能，如果是 C++ 来做的话，可能其程序员必须具备三年的经验，如果是 Python 来做，而 Python 又有解决问题所需要的库的话，一个具有一年程序经验的程序员可能就能完成了。但是，同样的，如果是 C++ 与Lua结合来解决问题的话，可能就只需要半个高级程序员和一个只有c语言一年经验的程序员就可以了。半个高级程序员负责提供 Lua 的函数库，另一个程序员，只需要用这些代码库实现逻辑就行了。</p>

<p>综上所述， C++ + Lua 的开发模式，和 Python 源代码库开发+ Python 脚本开发模式其实是一样的。但是站在程序员的角度上来说， C++ + Lua 就更为简单一些，因为除去基本的 Lua 解释代码外， C++ 可以为 Lua 动态提供各种函数库。而 Python 程序员则必须受制于 Python 所提供的各种功能库。所以，如果解决一些具有普遍性和重复性的问题时， Python 是有优势的，因为有很多的代码可以不用重写，而 C++ + Lua 则必须重构。如果是解决一些非普遍的问题，如果 Python 本身没有提供解决这些问题的库的话， Python 程序员，就必须走回 C++ 的老路了。</p>
]]></content>
	</entry>
	
	<entry>
		<title>Linux 磁盘空间管理</title>
		<link href="http://0.0.0.0/posts/mac-disk-full.html" />
		<updated>2013-03-13T00:00:00+08:00</updated>
		<id>http://0.0.0.0/posts/mac-disk-full.html</id>
		<content type="html"><![CDATA[<p>今天下午开会的时候，MBP 的电池耗尽，回到工位充电，没多久，系统提示：</p>

<blockquote><p>Start Up Disk is Almost Full…</p></blockquote>

<p>网上搜到<a href="http://www.ehow.com/how_4592058_start-up-disk-almost-full.html">这个文章</a>，回答得不错，条理很清晰。</p>

<hr />

<p>No matter how big your hard disk is, somehow it always gets filled. This can happen due to decreased viligance regarding unneeded files as well as ballooning file sizes. When your start-up disk -- the disk that contains Mac OS X -- is nearly full, your Mac notifies you so you can free space, since your system may crash or behave in unexpected ways if the hard disk gets completely filled.</p>

<p><strong>Instructions</strong></p>

<p>1、Delete files you no longer need. Some users allow files to accumulate on the desktop, for example. You can also delete files from your iTunes library -- media files can be quite large.</p>

<p>2、Move files that you need only infrequently to an external disk or USB thumb drive, and access them in that location when you need them.</p>

<p>3、Uninstall programs you don't use. To uninstall a program, open the Applications folder; right-click the program's icon and select "Move to Trash."</p>

<p>4、Empty your browser cache, which contains temporary files from the Web sites you visit. To empty Safari's cache, launch Safari and press "Option-Command-E".</p>

<p>5、Empty the Trash by right-clicking the Trash icon on the dock and selecting "Empty Trash."</p>

<hr />

<p>但是磁盘已满是硬伤，需要了解一些 Linux 磁盘管理的命令。</p>

<p>这里提一件伤心事，这台 MBP 购于2012年12月10日，12,488元，昨天查苹果官网，同款已经调价为 10,988元，现在 12,488的那款，已经升级为 2.6GHZ，这个我其实不太在意，关键的关键，<strong>256GB 闪存</strong>，Oops…</p>

<p>我只能这样安慰自己，虽然只用了三个多月，但是我已经基本适应其操作，并且在这台电脑上，做了很多有价值的事情，因此我具备了冲刺七月的能力，这笔钱，我已经提前赚回来了！</p>

<p>继续磁盘空间的问题。</p>

<p>磁盘是Linux系统中一项非常重要的资源，如何对其进行有效的管理直接关系到整个系统的性能问题。对Linux磁盘管理稍微有一些学习和经验的朋友们应该都知道 df、du 和 fdisk 这三个常用命令：df 用于检查文件系统磁盘占用情况，du 检查磁盘空间占用情况，而 fdisk 用于磁盘分区。</p>

<h2>du 命令</h2>

<hr />

<p><strong>用途</strong></p>

<p>概述磁盘使用。</p>

<p><strong>语法</strong></p>

<p>du [ -a | -s ] [ -k ] [ -m ] [ -g ] [ -l ] [ -r ] [ -x ] [ -H | -L ] [ File ... ]</p>

<p><strong>描述</strong></p>

<p>du命令显示用于文件的块的数量。如果指定的 File 参数实际上是一个目录，就要报告该目录内的所有文件。如果没有提供 File 参数，du命令使用当前目录内的文件。</p>

<p>如果 File 参数是一个目录，那么报告的块的数量就是分配到目录中文件以及分配到目录自身的块之和。</p>

<p>指定 -a 标志，报告个体文件中块数量。不管是否使用了 -a 标志，由 File 参数指定的个体文件总是要列出。</p>

<p>指定 -s 标志，报告用于所有指定文件和目录中所有文件的全部块。</p>

<p>块计数包括每个文件的间接块。块计数是通过 512 字节单位计算的，它与系统使用的群集大小无关。指定 -k 标志，通过 1024 字节单位计算块数。</p>

<p><strong>注意</strong></p>

<p>1、具有多个链接的文件只为一个条目计数和书写。</p>

<p>2、由于块计数只基于文件大小，所以在报告的块数中，未分配的块是没有包含进去的。</p>

<p>3、如果du得不到文件属性，或者无法读取目录，它就报告一个错误，并且会影响命令的退出状态。</p>

<p>参数：</p>

<table class='table table-bordered table-hover table-striped'>
<tbody>
<tr>
<th style="width:10%">参数</th>
<th>释义</th>
</tr>
<tr>
<td> -a </td>
<td> 为每个指定文件显示磁盘使用情况，或者为目录中每个文件显示各自磁盘使用情况。将该标志与-s标志进行对比。 </td>
</tr>
<tr>
<td> -g </td>
<td> 用 GB 单位计算块数，而不是用缺省的 512 字节单位。对磁盘使用情况的输出值要用浮点数，这是因为如果用字节为单位的话，值会非常大。 </td>
</tr>
<tr>
<td> -H </td>
<td> 如果在命令行指定了符号链接，du&nbsp;命令将统计链接引用的文件或文件层次结构的大小。 </td>
</tr>
<tr>
<td> -k </td>
<td> 用 1024 字节单位计算块数，而不是用缺省的 512 字节单位。 </td>
</tr>
<tr>
<td> -l </td>
<td> 在文件链接和多链接之间均匀地分配块。根据缺省值，有两个或者更多链接的文件只计数一次。 </td>
</tr>
<tr>
<td> -L </td>
<td> 如果在命令行指定了符号链接或者在文件层次结构的遍历中多次遇到符号链接，则&nbsp;du&nbsp;命令应统计链接引用的文件或文件层次结构的大小。 </td>
</tr>
<tr>
<td> -m </td>
<td> 用 MB 单位计算块数，而不是用缺省的 512 字节单位。对磁盘使用情况的输出值要用浮点数，这是因为如果用字节为单位的话，值会非常大。 </td>
</tr>
<tr>
<td> -r </td>
<td> 报告不可访问的文件或者目录名。此为缺省设置。 </td>
</tr>
<tr>
<td> -s </td>
<td> 为所有指定文件显示整个磁盘使用情况，或者为一个目录中的所有文件显示总的磁盘使用情况。将该标志与-a标志进行对比。 </td>
</tr>
<tr>
<td> -x </td>
<td> 在评估文件大小时，只评估那些与File参数指定的文件或者目录驻留在相同设备上的文件。例如，您可以指定一个在多个设备上包含文件的目录。这种情况下，-x标志就为与目录驻留在相同设备的所有文件显示块的大小。 </td>
</tr>
</tbody></table>


<h2>df 命令</h2>

<hr />

<p><strong>功能</strong></p>

<p>显示磁盘相关信息</p>

<p><strong>语法</strong></p>

<p>df [-b | -H | -h | -k | -m | -g | -P] [-ailn] [-T type] [-t] [filesystem ...]</p>

<p>参数：</p>

<table class='table table-bordered table-hover table-striped'><tbody>
<tr>
<th style="width:20%">参数</th>
<th>释义</th>
</tr>
<tr>
<td>-a</td>
<td> 包含全部的文件系统。</td>
</tr>
<tr>
<td>-b</td>
<td> Use (the default) 512-byte blocks. This is only useful as a way to override an BLOCKSIZE specification from the environment.</td>
</tr>
<tr>
<td>-h </td>
<td>以可读性较高的方式来显示信息。</td>
</tr>
<tr>
<td>-H </td>
<td>与-h参数相同，但在计算时是以1000 Bytes为换算单位而非1024 Bytes。</td>
</tr>
<tr>
<td>-k </td>
<td>指定区块大小为1024字节。</td>
</tr>
<tr>
<td>-l </td>
<td>仅显示本地端的文件系统。</td>
</tr>
<tr>
<td>-m </td>
<td>指定区块大小为1048576字节。</td>
</tr>
<tr>
<td>-P </td>
<td>使用POSIX的输出格式。</td>
</tr>
<tr>
<td>-t&lt;文件系统类型&gt; </td>
<td>仅显示指定文件系统类型的磁盘信息。</td>
</tr>
<tr>
<td>-T </td>
<td>显示文件系统的类型。</td>
</tr>
</tbody></table>


<p>不同的操作系统下，参数不尽相同。请使用：</p>

<p><code>$ man df</code></p>

<p>查看文档。</p>

<p>示例：</p>

<p><code>df -h /opt</code></p>

<p><a href="http://wiki.51osos.com/wiki/Df">参考51开源社区</a></p>

<p>全文完。</p>
]]></content>
	</entry>
	
	<entry>
		<title>写文档 写总结 写代码</title>
		<link href="http://0.0.0.0/posts/doc-value.html" />
		<updated>2013-03-09T00:00:00+08:00</updated>
		<id>http://0.0.0.0/posts/doc-value.html</id>
		<content type="html"><![CDATA[<p>2013年，我们真正开始把文档编写做为重头工作，并且得到了同事的认可和支持。其实，我不求文辞优美，撰写本身，也不是全部的目的，但我坚信，写文档的过程，就是你理解项目、认知流程的过程，这是非常有意义的，并非为他人作嫁衣裳。</p>

<p>经过辛苦的说教，时隔一年，似乎有了一些成果，大多数同事，周结写得越来越好了，我相信我们能把 BBS6 和广告支持的文档写好。</p>

<hr />

<p>技术男的缺点就是，闷骚，走神，沉沦！</p>

<p>写代码难吗？说真的，写好代码也难，要有扎实的功能，灵活的思路，和严谨的逻辑。说白了，做好任何一件事情，都不容易。</p>

<p>其实在我身边儿的同事，其实大多数人写代码学是OK的，但是写文档和做周结的功底，实在是太差了，无论有多大的阻力，我也要想办法训练他们在这方面的能力。每个人都要学会怎么去做一周的计划和总结，从格式，到内容，都要重视，每一封邮件都当一次面试一样对待。我更希望看到的是这一周工作中，遇到的问题和你的建议，而不只是流水帐。总结要做好，不是从周五才开始写的，平时随手记，周五整理才对。</p>

<p>在做网速监测系统的时候，麻建强说过，他以前不明白，为什么在济南的时候，他们三个写代码的人，拿的工资不及一个写文档的。其实，那写的不只是文档，那是蓝图，只有吃透软件，才能写出可供其它人做为开发依据的文档。你可能或多或少也有这样的疑问，领导好像每天就是开几个会，收发一下邮件什么的，为什么他就能居我之上？带领一个团队，规划，总结，调整，那是最伤脑筋的活，事关全局的成败。</p>

<p>今天开会，黄勇和我们分享两句话，我觉得非常好：</p>

<ol>
<li>一定要让别人知道你在做什么；</li>
<li>一定要让别人知道，你做的事情是有价值的！</li>
</ol>


<p>原作于2012年4月13日。</p>
]]></content>
	</entry>
	
	<entry>
		<title>像黑客一样写自己的技术博客</title>
		<link href="http://0.0.0.0/posts/my-tech-blogging-like-a-hacker.html" />
		<updated>2012-03-04T00:00:00+08:00</updated>
		<id>http://0.0.0.0/posts/my-tech-blogging-like-a-hacker.html</id>
		<content type="html"><![CDATA[<p>说实话，我发现自己的确是个形式主义者，工具癖，规划控……就是不想静下来仔细思考认真沉淀最后生产出点有质量的内容，而且从小就是（我曾多次准备好一个练习本规划好用来如何写组词造句等，但第一页都没写完过）。再加上重度的拖延症，偶尔稍微纠结下，曾经写点技术积累的想法就彻底夭折了。</p>

<p>但在用了<a href="https://github.com/">GitHub</a>这么一段时间后，对<a href="http://daringfireball.net/projects/markdown/">Markdown</a>语法和<a href="https://github.com/mojombo/jekyll">jekyll</a>建站托管的迷恋一发不可收拾，基本上达到了手里拿着一把榔头就准备到处去敲钉子的地步。于是琢磨着用这些东西再次开个博客稍微的积累点技术方面东西，自然的，也是对<a href="http://wordpress.org/">WordPress</a>时代的一个告别：</p>

<ul>
<li>其实我不想维护数据库</li>
<li>其实我只想生成静态的html</li>
<li>其实我不需要什么CMS</li>
<li>其实我讨厌富文本编辑器</li>
<li>其实我希望最好可以像使用svn一样维护版本</li>
</ul>


<p>其实，我只希望一切都很简单。</p>

<p>然后我通过<a href="https://github.com/">GitHub</a>遇见了<a href="https://github.com/mojombo/jekyll">jekyll</a>，加上<a href="https://github.com/">Github</a>本身支持对网站项目的托管和域名指向，以及以前用的各种云服务，整个世界瞬间变的美好了！</p>

<p>现在，我可以：</p>

<ul>
<li>使用纯文本的<a href="http://daringfireball.net/projects/markdown/">Markdown</a>编辑文章</li>
<li>使用git维护文章的版本</li>
<li>不用租一个虚拟空间和数据库服务，而就在<a href="https://github.com/">GitHub</a>上托管整个网站</li>
<li>自定义域名指向</li>
<li>使用<a href="http://disqus.com/">Disqus</a>的云评论服务</li>
<li>一如既往的使用<a href="https://picasaweb.google.com/">Google Picasa</a>作为我的图片外链服务</li>
<li>用<a href="http://www.google.com/cse/">Google Custom Search</a>自定义站内搜索</li>
<li><a href="https://github.com/mojombo/jekyll">jekyll</a>自带的或者用<a href="http://softwaremaniacs.org/soft/highlight/en/">HighlightJS</a>做代码高亮</li>
<li><a href="http://en.gravatar.com/">Gravatar</a>统一头像标识服务</li>
<li>……</li>
</ul>


<p>感谢这个有云的时代！可以让我们通过一件件简单的工具打造属于每个程序员自己的站点，<a href="http://kyle.xlau.org/posts/blogging-like-a-hacker.html">像黑客一样写博客</a>（原文：<a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">Blogging Like a Hacker</a>）。于是我可以把精力只放在文章的内容上，这一定会更有效率。</p>

<p>今后，我会在这里记录开发中遇到和解决的各种问题，与技术有关的思考，姑且就当做一个代码笔记本了。不过回到开始说的，不管形式如何，努力坚持产出才是王道。</p>
]]></content>
	</entry>
	
	<entry>
		<title>Hello world!</title>
		<link href="http://0.0.0.0/posts/hello-world.html" />
		<updated>2012-03-04T00:00:00+08:00</updated>
		<id>http://0.0.0.0/posts/hello-world.html</id>
		<content type="html"><![CDATA[<p>这是一篇测试文章，你可以在<code>_posts</code>目录修改或删除它。</p>

<p>现在，我可以：</p>

<ul>
<li>使用纯文本的[Markdown]编辑文章</li>
<li>使用git维护文章的版本</li>
<li>不用租一个虚拟空间和数据库服务，而就在[GitHub]上托管整个网站</li>
<li>自定义域名指向</li>
<li>使用[Disqus]的云评论服务</li>
<li>一如既往的使用[Google Picasa]作为我的图片外链服务</li>
<li>用[Google Custom Search]自定义站内搜索</li>
<li>[jekyll]自带的或者用[HighlightJS]做代码高亮</li>
<li>[Gravatar]统一头像标识服务</li>
<li>……</li>
</ul>


<p>感谢这个有云的时代！可以让我们通过一件件简单的工具打造属于每个程序员自己的站点，<a href="http://kyle.xlau.org/posts/blogging-like-a-hacker.html">像黑客一样写博客</a>（原文：<a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">Blogging Like a Hacker</a>）。</p>
]]></content>
	</entry>
	
	<entry>
		<title>window 下建立 github 连接</title>
		<link href="http://0.0.0.0/posts/start-github-on-window.html" />
		<updated>2011-10-02T00:00:00+08:00</updated>
		<id>http://0.0.0.0/posts/start-github-on-window.html</id>
		<content type="html"><![CDATA[<p>在 window 下搭建 github 连接。</p>

<h3>前提</h3>

<p>这个前提还是比较简单的，你需要有一个 email，然后在 GitHub 上注册一个账户。</p>

<h3>工具</h3>

<p>在 window 建立 ssh 连接的工具挺多的。GitHub 也有自己的一个工具来帮助用户建立 Git
连接--Git。
哈哈，<a href="http://code.google.com/p/msysgit/downloads/list">这儿下载Git</a>,具体的安装
方法参考<a href="http://help.github.com/win-set-up-git/">这里</a></p>

<h3>输入命令，建立连接</h3>

<p>安装好 Git 之后，可别把它丢在一边不理了。这里有一些命令需要你手动输入。
1.  检查是否含有 SSH keys。（如果有的话，直接跳到第 4 步）不要太急哈，你刚刚才注
册，怎么会有呢？
    $ cd ~/.ssh
如果你在这里显示 "No such file or dirdectory" 请先跳到第 3 步，然后再跳回第 2 步
，挺好玩的哈。</p>

<ol>
<li><p>备份和删除已经存在的 SSH keys
    $ ls
    //这里大概会显示出你的几个文件，如下：
    config id_rsa id_rsa.pub know_hosts
    $ mkdir key_backup
    //创建一个备份目录
    $ cp id_rsa<em> key_backup
    //将 keys 保存到 key_backup, </em>号表示各种后缀
    $ rm id_rsa*
    //删除啦</p></li>
<li><p>新建一个 SSH keys
输入下面的代码哈。到了需要路径的时候，点击 enter 就好。
    $ ssh-keygen -t rsa -C "your_email@yourmail.com"
    //引号部分是你的刚刚申请的 github 帐号的邮箱噢,这个时候会输出如下内容：
    Generating public/private rsa key pair.
    Enter file in which to save the key
    //让你输入要保存 key 的路径
    (/users/your_user_directory/.ssh/id_rsa):
    //你只需要 enter 就好</p>

<p>接着还要输入 ssh 密码
    Enter passphrase (empty for no passphrase):
    //输入密码
    Enter same passphrase again:
    //再次输入密码</p>

<p>紧接着你会看到如下的输出：
    Your identification has been saved in
    /Users/your_user_directory/.ssh/id_rsa.
    Your public key has been saved in
    /User/your_user_directory/.ssh/id_rsa.pub.
    The key fingerpring is:
    01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db user_name@username.com
    +--[ RSA 2048]----+
    |                 |
    |                 |
    |                 |
    |                 |
    |                 |
    +-----------------+
注：是不是你没看到下面那个框框呢？只看到一串这样格式的字符01:0f:f4...?这没关系，
待会你按照下面说的做就好了。</p></li>
<li><p>把 SSH key 加到你的 GitHub
嘿嘿，登录 GitHub，然后点击 "Account Setting" > "SSH Public Keys" > "Add another public key"
然后打开 id_rsa.pub 文件（用 txt 打开就好，或者 vim ）。这就是你的公钥。
注：id_rsa.pub 的路径是 C:\Documents and Settings\Administrator.ssh\ ，如果你刚
刚按上面的做的话。</p></li>
<li><p>测试啦
现在可以尝试使用 SSH 连接到 GitHub 啦。输入下面命令：
    $ ssh -T git@github.com</p>

<p>接着会出现这样的代码：
    The authenticity of host 'github.com(207.97.227.239)' can not be established.
    RSA key fingerprint is 10:10:10:....
    //省略后面那一串
    Are you sure you want to connitnue connecting(yes/no)?</p>

<p>别当心，输入 yes，成功的话，会显示这样：
    Hi username! ...</p>

<p>如果显示 fail 的话，请检查一下你刚刚在 GitHub 上的公钥，是否少了空格或者换行之类
的。</p></li>
</ol>


<h3>后续的工作</h3>

<p>现在你已经可以通过使用 Git 设置 SSH keys 来连接到你的 GitHub 上面了。接下来你可
以设置你的个人信息，token 或者其他等。这里不列举了。
万事开头难，加油。</p>

<h3>参考文章</h3>

<p><a href="http://help.github.com/win-set-up-git/">GitHub 上的帮助文档</a></p>
]]></content>
	</entry>
	
</feed>